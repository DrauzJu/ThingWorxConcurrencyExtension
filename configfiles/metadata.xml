<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Entities>
    <ExtensionPackages>
        <ExtensionPackage description="Concurrency Tools, based on the code provided by 'antondorf' on the ThingWorx Developers Community." minimumThingWorxVersion="6.5.0" name="ConcurrencyExtension" packageVersion="0.1.33" vendor="">
            <JarResources>
                <FileResource file="ThingWorxConcurrencyExtension.jar" type="JAR"/>
            </JarResources>
        </ExtensionPackage>
    </ExtensionPackages>
    <ScriptFunctionLibraries>
        <ScriptFunctionLibrary className="ConcurrencyFunctions" description="Some tools for concurrenty, also to recover Concurrency stats as we can't create a subsystem from one extension" name="ConcurrencyExtension">
            <FunctionDefinitions>
                <FunctionDefinition description="Returns the total active locks." name="Concurrency_GetTotalActiveLocks">
                    <ResultType baseType="LONG" description="The total ammount." name="result"/>
                </FunctionDefinition>
                <FunctionDefinition description="Returns tht total active threads which are waiting on a lock." name="Concurrency_GetTotalActiveWaiting">
                    <ResultType baseType="LONG" description="The total ammount." name="result"/>
                </FunctionDefinition>
                <FunctionDefinition description="Returns the total number of mutex created on Things." name="Concurrency_GetTotalThingsLocksUsage">
                    <ResultType baseType="LONG" description="The total ammount." name="result"/>
                </FunctionDefinition>
                <FunctionDefinition description="Get a exclusive Lock for the given id, for instance a Thing Name. Recomended usage:              var meName = me.name;              Concurrency_Lock(meName);              try {                // -- whatever code that needs to be mutex              } finally {                Concurrency_Unlock(meName);             }" name="Concurrency_Lock">
                    <ParameterDefinitions>
                        <FieldDefinition baseType="STRING" description="Lock Id, you must use it on the unlock process" name="id"/>
                    </ParameterDefinitions>
                    <ResultType baseType="NOTHING" description="." name="result"/>
                </FunctionDefinition>
                <FunctionDefinition description="Get a exclusive Lock for the given id, with or without a timout. timeOut parameter it's optional." name="Concurrency_TryLock">
                    <ParameterDefinitions>
                        <FieldDefinition baseType="STRING" description="Lock Id, you must use it on the unlock process" name="id"/>
                        <FieldDefinition baseType="LONG" description="Timeout in milliseconds. Default = -1 if you don't want a timeout -&gt; only one it's allowed others are discarded." name="timeOut"/>
                    </ParameterDefinitions>
                    <ResultType baseType="BOOLEAN" description="Returns true if the lock was acquired, false otherwise. If -1, does a tryLock without a timeout" name="result"/>
                </FunctionDefinition>
                <FunctionDefinition description="Freeds the current lock for the given id, for instance a Thing Name." name="Concurrency_Unlock">
                    <ParameterDefinitions>
                        <FieldDefinition baseType="STRING" description="Lock Id, used on the Lock/TryLock counterpart" name="id"/>
                    </ParameterDefinitions>
                    <ResultType baseType="NOTHING" description="." name="result"/>
                </FunctionDefinition>
                <FunctionDefinition description="Check if given lock id it's acquiered." name="Concurrency_IsLocked">
                    <ParameterDefinitions>
                        <FieldDefinition baseType="STRING" description="Lock Id to check" name="id"/>
                    </ParameterDefinitions>
                    <ResultType baseType="BOOLEAN" description="Returns true if the lock was acquired, false otherwise. If -1, does a tryLock without a timeout" name="result"/>
                </FunctionDefinition>
            </FunctionDefinitions>
        </ScriptFunctionLibrary>
    </ScriptFunctionLibraries>
</Entities>
